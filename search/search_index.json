{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>One day a  and a  got lost.</p>"},{"location":"code-examples/","title":"About","text":"<p>An example of a code block for Python:</p> <pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> <p>An example for Praat:</p> <pre><code>   To Intensity: 100, 0\n   n = Get number of frames\n   for i to n\n      intensity = Get value in frame: i\n      if intensity &gt; 40\n         time = Get time from frame: i\n         writeInfoLine: \"Onset of sound at: \", fixed$ (time, 3), \" seconds.\"\n         exit\n      endif\n   endfor\n</code></pre>"},{"location":"math-examples/","title":"Math","text":"<p>Inline and block formulas render differently.</p> <ul> <li>Farshad</li> <li>Jamshid</li> </ul> <p>For example, this is \\(\\sum_{i=0}^n i^2 = \\frac{(n^2+\\epsilon)(2n+1)}{6\\phi}\\) an inline mode) </p> <p>And the block mode looks like this (don't forget empty line!)</p> \\[\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}\\]"},{"location":"corpus/placeholder/","title":"Speech Sound Archive","text":"<p>A collection of annotated speech recordings with phonetic transcriptions and linguistic glosses. Click the play button to listen.</p>"},{"location":"corpus/sarcheragh/","title":"My Audio Demo","text":"<p>Here\u2019s a Persian bird sound:</p> <p> </p> <p> </p>"},{"location":"exercises/beat-frequency/","title":"Exercise 3: Exploring Beat Frequency","text":""},{"location":"exercises/beat-frequency/#objective","title":"Objective","text":"<p>The goal of this exercise is to explore the phenomenon of beat frequency using stereo sounds in Praat. You will combine sine waves with slightly different frequencies, observe the formation of beats, and investigate how our auditory system perceives these beats differently based on how the sound is created. There is no submission required; focus on experimenting and understanding. You are expected to know the basic concept of beat frequencies for your final exam.</p>"},{"location":"exercises/beat-frequency/#understanding-beat-frequency","title":"Understanding Beat Frequency","text":"<p>Beat frequencies occur when two sound waves with slightly different frequencies interfere, creating a tone that fluctuates in volume between loud and soft. This fluctuation is known as beats. The phenomenon arises from the constructive and destructive interference between the two waves.  </p> <p>When two waves are expressed mathematically as:</p> \\[ x_1 = A \\cos(\\omega_1 t) \\quad \\text{and} \\quad x_2 = A \\cos(\\omega_2 t), \\] <p>their sum can be simplified using a trigonometric identity, leading to:</p> \\[ x = x_1 + x_2 = 2A \\cos(\\omega_{\\text{mod}} t) \\cos(\\omega_{\\text{avg}} t), \\] <p>where:</p> <ul> <li>\\(\\omega_{\\text{avg}} = \\frac{\\omega_1 + \\omega_2}{2}\\) is the average angular frequency,</li> <li>\\(\\omega_{\\text{mod}} = \\frac{\\omega_1 - \\omega_2}{2}\\) is the modulation angular frequency.</li> </ul> <p>For beat frequencies to occur, the two angular frequencies must be close in value. Mathematically, this condition can be expressed as:</p> \\[ |\\omega_1 - \\omega_2| \\ll \\omega_1 + \\omega_2. \\] <p>This implies that the average angular frequency, \\(\\omega_{\\text{avg}}\\), is approximately equal to \\(\\omega_1\\) or \\(\\omega_2\\), while the modulation angular frequency, \\(\\omega_{\\text{mod}}\\), is very small, approaching zero. As a result, the \\(\\cos(\\omega_{\\text{mod}} t)\\) term oscillates very slowly. Combined with the amplitude term \\(2A\\), the product \\(2A \\cos(\\omega_{\\text{mod}} t)\\) provides a slowly varying amplitude for the \\(\\cos(\\omega_{\\text{avg}} t)\\) function.</p> <p>This implies that the average angular frequency, \u03c9<sub>avg</sub>, is approximately equal to \u03c9<sub>1</sub> or \u03c9<sub>2</sub>, while the modulation angular frequency, \u03c9<sub>mod</sub>, is very small, approaching zero. As a result, the cos\u2006(\u03c9<sub>mod</sub>t) term oscillates very slowly. Combined with the amplitude term 2A, the product 2Acos\u2006(\u03c9<sub>mod</sub>t) provides a slowly varying amplitude for the cos\u2006(\u03c9<sub>avg</sub>t) function.</p> <p>The beat frequency is found to be twice the modulation frequency, \\(f_{\\text{mod}}\\), where:</p> \\[ f_{\\text{mod}} = \\frac{\\omega_{\\text{mod}}}{2\\pi}. \\] <p>Thus, we have:</p> \\[ f_{\\text{beat}} = 2 \\cdot f_{\\text{mod}} = f_1 - f_2. \\] <p>This means the rate of amplitude modulation (i.e., the number of beats per second) corresponds to the absolute frequency difference between the two waves.</p> <p>This means the rate of amplitude modulation (i.e., the number of beats per second) corresponds to the absolute frequency difference between the two waves.</p> <p>The formation of beats is illustrated in the figure below. The upper graph shows the signal at frequency f<sub>1</sub>, the middle graph shows the signal at frequency f<sub>2</sub>, and the bottom graph represents the sum of the two signals, with f<sub>1</sub> and f<sub>2</sub> very close to each other in value. The peaks and troughs of the beats are separated by one beat period, as indicated in the figure.</p> <p> </p>"},{"location":"exercises/beat-frequency/#exercise-instructions","title":"Exercise Instructions","text":"<p>Follow the steps below to create and explore beat frequencies in Praat.</p>"},{"location":"exercises/beat-frequency/#step-1-create-stereo-sound-with-identical-channels","title":"Step 1: Create Stereo Sound with Identical Channels","text":"<ol> <li> <p>Open Praat and go to <code>New</code> \u2192 <code>Sound</code> \u2192 <code>Create Sound from formula...</code>.</p> </li> <li> <p>Use the following parameters in the pop-up window:</p> </li> <li> <p>Name: <code>stereoIdentical</code></p> </li> <li>Number of channels: <code>Stereo</code></li> <li>Start time (s): <code>0</code></li> <li>End time (s): <code>2</code></li> <li>Sampling frequency (Hz): <code>44100</code></li> <li> <p>Formula: <pre><code>1/2 * sin(2*pi*200*x) + 1/2 * sin(2*pi*205*x)\n</code></pre></p> </li> <li> <p>Play the sound and examine the waveform. Since you just added two sine waves with very close frequencies (200 Hz and 205 Hz), the resulting sound has a beat frequency of 205\u2005\u2212\u2005200\u2004=\u20045 Hz. This beat frequency is perceived as periodic variations in the intensity of the sound. Additionally, observe that it produces a consistent beat pattern across both channels because the sounds in both channels are identical.</p> </li> </ol>"},{"location":"exercises/beat-frequency/#step-2-create-a-stereo-sound-with-different-frequencies-in-each-channel","title":"Step 2: Create a Stereo Sound with Different Frequencies in Each Channel","text":"<ol> <li> <p>Go to <code>New</code> \u2192 <code>Sound</code> \u2192 <code>Create Sound from formula...</code>.</p> </li> <li> <p>Use the following parameters in the pop-up window:</p> </li> <li> <p>Name: <code>stereoDifferent</code></p> </li> <li>Number of channels: <code>Stereo</code></li> <li>Start time (s): <code>0</code></li> <li>End time (s): <code>2</code></li> <li>Sampling frequency (Hz): <code>44100</code></li> <li>Formula: <pre><code>if row = 1 then 1/2 * sin(2*pi*200*x) else 1/2 * sin(2*pi*205*x) endif\n</code></pre></li> </ol> <p>The conditional expression in the formula directs channel 1 to have a frequency of 200 Hz and channel 2 to have 205 Hz.</p>"},{"location":"exercises/beat-frequency/#step-3-listen-with-headphones-and-compare-perception","title":"Step 3: Listen with Headphones and Compare Perception","text":"<ol> <li> <p>Listen to the sound using stereo speakers. You should hear beats caused by the interaction of the two frequencies.</p> </li> <li> <p>Use headphones and listen separately with the left ear and then with the right ear. You will hear slightly different tones in each channel.</p> </li> <li> <p>Listen with both ears using headphones. You will perceive beats, which are not in the audio signal but are constructed in your brain. In contrast to the beats in the previous step, which were present in the audio signals reaching your ears, these beats are created solely by your brain.</p> </li> <li> <p>Experiment with other values to create beats with different frequencies. For example, try to create beats with 1 Hz and 15 Hz, and observe how the beat frequency changes as you adjust the difference between the two frequencies.</p> </li> </ol>"},{"location":"exercises/beat-frequency/#conclusion","title":"Conclusion","text":"<p>This exercise demonstrates the phenomenon of beat frequencies and how they are perceived differently based on the listening context. When listening with both ears, our brain integrates the two slightly different frequencies to create a unified perception of beats. This activity highlights how auditory perception involves both the physical properties of sound waves and the processing capabilities of the brain.</p>"},{"location":"exercises/flowchart/","title":"Flowchart","text":"<p>```mermaid graph TD     A[Sound Waves] --&gt; B[Periodic]     A --&gt; C[Aperiodic]     B --&gt; D[Simple]     B --&gt; E[Complex]     C --&gt; F[Continuous]     C --&gt; G[Transient]     D --&gt; H[Pure Tone]     E --&gt; I[Complex Tone]     F --&gt; J[Noise]     G --&gt; K[Pulse]  </p> <pre><code>%% Invisible alignment nodes  \nH -.-&gt; L[\" \"]  \nI -.-&gt; M[\" \"]  \nJ -.-&gt; N[\" \"]  \nK -.-&gt; O[\" \"]  \nstyle L height:0px,width:0px  \nstyle M height:0px,width:0px  \nstyle N height:0px,width:0px  \nstyle O height:0px,width:0px  \nlinkStyle 8,9,10,11 stroke-width:0px\n\n%% Waveform examples (aligned under terminal nodes)  \nsubgraph Waveform Examples  \n    L[\"&lt;img src='sine_wave.png' width='100'/&gt;\"]  \n    M[\"&lt;img src='sine_wave.png' width='100'/&gt;\"]  \n    N[\"&lt;img src='sine_wave.png' width='100'/&gt;\"]  \n    O[\"&lt;img src='sine_wave.png' width='100'/&gt;\"]  \nend\n</code></pre>"},{"location":"exercises/ocean-waves/","title":"Creating Synthetic Ocean Wave Sound in Praat Using Noise and ADSR","text":"<p>The purpose of this exercise is to create a synthetic ocean wave sound effect by modulating the amplitude of noise. This will involve generating noise, modifying its spectrum, applying a low-pass filter, and shaping its amplitude with an ADSR envelope.</p>"},{"location":"exercises/ocean-waves/#step-by-step-instructions","title":"Step-by-Step Instructions","text":"<p>Complete each step manually in Praat's GUI to understand the effect of each transformation. Only the step for creating the ADSR envelope will be completed using a script. This hands-on approach will help you grasp the fundamentals of sound modulation and synthesis in Praat.</p>"},{"location":"exercises/ocean-waves/#generate-white-noise","title":"Generate White Noise","text":"<ol> <li>In Praat, go to <code>New</code> \u2192 <code>Sound</code> \u2192 <code>Create Sound from formula...</code></li> <li>Set the name to <code>white_noise</code>, duration to <code>10 seconds</code>, and sampling frequency to <code>44100 Hz</code>.</li> <li>Use the following formula for generating white noise:     <pre><code>randomUniform(-0.99, 0.99)\n</code></pre>     The function <code>randomUniform(lower, upper)</code> generates random numbers between <code>lower</code> and <code>upper</code>.</li> <li>Click <code>OK</code> to create the white noise.</li> </ol>"},{"location":"exercises/ocean-waves/#convert-white-noise-to-pink-noise","title":"Convert White Noise to Pink Noise","text":"<ol> <li>With the white noise selected, go to <code>Analyse spectrum</code> \u2192 <code>To Spectrum...</code> to transform the sound into its spectral representation.</li> <li>Next, go to <code>Modify</code> \u2192 <code>Formula...</code></li> <li>In the <code>Formula</code> field, use the following code to modify the spectrum of the noise:     <pre><code>if x &gt; 100 then self * sqrt(100/x) else 0 fi\n</code></pre></li> <li>Click <code>OK</code>. This formula attenuates higher frequencies, transforming the white noise into pink noise.</li> <li>Finally, to convert the modified spectrum back to the actual sound of pink noise, go to <code>Sound</code> \u2192 <code>To Sound</code>.</li> </ol>"},{"location":"exercises/ocean-waves/#apply-a-low-pass-filter","title":"Apply a Low-Pass Filter","text":"<ol> <li>Select the pink noise you created in the previous step.</li> <li>Go to <code>Filter</code> \u2192 <code>Pass Hann band...</code></li> <li>Set the frequency range as desired (e.g., <code>0 Hz</code> to <code>8000 Hz</code>) to filter out high frequencies, creating a softer, wave-like sound.</li> <li>Click <code>OK</code> to apply the low-pass filter.</li> </ol>"},{"location":"exercises/ocean-waves/#create-an-adsr-envelope-and-listen-to-the-result","title":"Create an ADSR Envelope and Listen to the Result","text":"<p>Before applying the ADSR envelope, it\u2019s helpful to understand what an ADSR envelope is and how it shapes the amplitude of a sound.</p>"},{"location":"exercises/ocean-waves/#what-is-adsr","title":"What is ADSR?","text":"<p>An ADSR envelope represents four phases in the amplitude shaping of a sound:</p> <ul> <li>this is life</li> <li> <p>is this the world we created?</p> </li> <li> <p>Attack \u2013 Time taken for the sound to reach its peak from silence.</p> </li> <li>Decay \u2013 Time taken to reach a steady stater or \"sustain level\" from the peak.</li> <li>Sustain \u2013 The amplitude level that is maintained for a certain duration after the initial changes in the attack and decay phases.</li> <li>Release \u2013 Time taken to fade out to silence after the sustain phase ends.</li> </ul> <p>The ADSR envelope helps give a sound its dynamic shape over time.</p>"},{"location":"exercises/ocean-waves/#modulating-the-noise-with-an-adsr-envelope","title":"Modulating the Noise with an ADSR Envelope","text":"<ol> <li>In Praat, create a new script to generate an ADSR envelope that modulates the amplitude of the filtered pink noise.</li> <li> <p>Paste the following code into the script editor in Praat.</p> <pre><code># ADSR envelope creation in Praat\n\n# Parameters for ADSR\nattackTime = 6   \ndecayTime = 2    \nsustainLevel = 0.4 \nreleaseTime = 2  \ntotalDuration = 10 \n\n# Create an amplitude modulation using ADSR\nCreate AmplitudeTier: \"ADSR\", 0, totalDuration\n\n# Attack phase\nAdd point: 0, 0\nAdd point: attackTime, 0.7\n\n# Decay phase\nAdd point: attackTime + decayTime, sustainLevel\n\n# Sustain phase\nAdd point: totalDuration - releaseTime, sustainLevel\n\n# Release phase\nAdd point: totalDuration, 0\n</code></pre> </li> <li> <p>After running the script, you will have an amplitude tier named <code>ADSR</code>.</p> </li> <li>To apply this ADSR envelope to the filtered pink noise, select both the amplitude tier and the noise, then click <code>Multiply</code>.</li> <li>Play the resulting sound to listen to the ocean wave effect created. Adjust the ADSR parameters or filter settings to further shape the sound as desired.</li> </ol>"},{"location":"exercises/ocean-waves/#experiment-with-different-envelopes","title":"Experiment with Different Envelopes","text":"<p>In this step, you will observe and experiment with various ADSR envelope shapes. Below are four different ADSR envelope configurations:</p> <p></p> <ol> <li>Study the four different ADSR envelopes in the figure. Note that there are no exact values for the parameters in the figure, so use visual inspection to estimate reasonable values for each ADSR parameter (e.g., <code>attackTime</code>, <code>decayTime</code>, <code>sustainLevel</code>, <code>releaseTime</code>) that would match each envelope's shape.</li> <li>Modify the parameters in the Praat script (e.g., <code>attackTime</code>, <code>decayTime</code>, <code>sustainLevel</code>, <code>releaseTime</code>) to simulate each envelope shown in the figure.</li> <li>After simulating each envelope, use it to modulate the noise (following the previous steps) to create a new sound. You will create four new sounds, each corresponding to one of the envelopes in the figure.</li> <li>Listen to the resulting sounds to observe how changes in the ADSR parameters affect the sound\u2019s characteristics.</li> <li>Submit each sound as part of your task, and for each sound, explain how the overall shape of the sound is influenced by each ADSR parameter (attack, decay, sustain, release).</li> </ol>"},{"location":"exercises/sawtooth/","title":"Creating Complex Sounds from Simple Sine Waves in Praat","text":"<p>Thank you very much everybody I decided to be a good man!</p>"},{"location":"exercises/sawtooth/#objective","title":"Objective","text":"<p>In this exercise, you'll learn how to create a sound using sine waves. You'll begin by creating a single sine wave and gradually add more sine waves. As you add more, observe the changes in the sound and its shape. Eventually, you will notice that the sound you are creating resembles a new kind of wave, known as a sawtooth wave. Below are the visual representations of a sine wave and a sawtooth wave for comparison.</p>"},{"location":"exercises/sawtooth/#visualizing-the-waves","title":"Visualizing the Waves","text":"<p>Here\u2019s an example of what sine and sawtooth waves look like:</p> <p> Figure 1: A sine wave over three periods.</p> <p>Warning Since you are about to create audio waves, you have to be careful with the sound levels. Keep your computer's volume at a reasonable level before playing any sounds to avoid damaging your hearing or hardware. Start with a low volume and adjust only after assessing the sound.</p>"},{"location":"exercises/sawtooth/#step-1-creating-a-simple-sine-wave","title":"Step 1: Creating a Simple Sine Wave","text":"<ol> <li>Open Praat and go to <code>New &gt; Sound &gt; Create Sound from formula...</code>.</li> <li>In the dialog box, use the following parameters:</li> <li>Name: Enter a name for your sound (e.g., <code>sineWave</code>).</li> <li>Start time (s): Set it to <code>0</code>.</li> <li>End time (s): Set it to <code>1</code> (for a 1-second sound).</li> <li>Sampling frequency (Hz): Set it to <code>44100 Hz</code>.</li> <li>Formula: Enter the formula to create a basic sine wave:      <pre><code>0.5 * sin(2 * pi * 440 * x)\n</code></pre></li> <li>This creates a sine wave with a frequency of 440 Hz (a standard A note). The factor <code>0.5</code> ensures the amplitude of the resulting sound stays within the acceptable range in Praat.</li> <li>Click <code>OK</code> and then play the sound to hear the pure sine wave.</li> </ol>"},{"location":"exercises/sawtooth/#step-2-adding-a-second-sine-wave-first-harmonic","title":"Step 2: Adding a Second Sine Wave (First Harmonic)","text":"<ol> <li>Next, we\u2019ll add another sine wave that has a higher frequency, known as a harmonic.</li> <li>Go back to <code>New &gt; Sound &gt; Create Sound from formula...</code>.</li> <li>In the dialog box, use the following formula to add the first harmonic: <pre><code>   0.5 * (sin(2 * pi * 440 * x) + (1/2) * sin(2 * pi * 880 * x))\n</code></pre></li> </ol>"},{"location":"exercises/sawtooth/#step-3-adding-more-harmonics","title":"Step 3: Adding More Harmonics","text":"<p>Now, we will continue adding more sine waves at even higher frequencies. Each new sine wave (harmonic) will be a multiple of the base frequency (440 Hz) and will have a smaller amplitude. Use the following formula to add the second harmonic: <pre><code>   0.5 * (sin(2 * pi * 440 * x) + (1/2) * sin(2 * pi * 880 * x) + (1/3) * sin(2 * pi * 1320 * x))\n</code></pre></p> <p>Continue this process by adding more harmonics up to around 10. Here\u2019s how you would add more harmonics: <pre><code>   0.5 * (sin(2 * pi * 440 * x) + (1/2) * sin(2 * pi * 880 * x) + (1/3) * sin(2 * pi * 1320 * x) + (1/4) * sin(2 * pi * 1760 * x) + (1/5) * sin(2 * pi * 2200 * x) + (1/6) * sin(2 * pi * 2640 * x) + (1/7) * sin(2 * pi * 3080 * x) + (1/8) * sin(2 * pi * 3520 * x) + (1/9) * sin(2 * pi * 3960 * x) + (1/10) * sin(2 * pi * 4400 * x))\n</code></pre></p> <p>After adding several harmonics, the sound will begin to change in a more dramatic way. Continue to play the sound and observe how it changes.</p>"},{"location":"exercises/sawtooth/#step-4-visualizing-and-discovering-a-new-wave-shape","title":"Step 4: Visualizing and Discovering a New Wave Shape","text":"<p>Use Praat\u2019s View and Edit tool to open the waveform. Take a screenshot of the waveform after each stage: After adding one sine wave, After adding two sine waves, After adding three sine waves, and so on. Observation: What do you notice about the shape of the waveform as you add more sine waves? After adding enough harmonics, the waveform will resemble what is known as a sawtooth wave. This exercise demonstrates that a sawtooth wave is a combination of many sine waves of different frequencies.</p>"},{"location":"exercises/sawtooth/#deliverables","title":"Deliverables","text":"<p>Submit screenshots of the waveform at different stages: After adding one sine wave, After adding two sine waves, After adding three sine waves, Continue this for each additional harmonic. Reflection: Write a brief reflection on how the sound changes as you add each new sine wave. In your reflection, address the following: What do you observe in the shape of the waveform? How does the sound evolve as you introduce more harmonics? Submission Deadline: 19 October 2024.</p>"},{"location":"exercises/sawtooth/#conclusion","title":"Conclusion","text":"<p>By the end of this exercise, you will have learned how to create complex sounds by adding sine waves and visualizing their waveforms. You will also have a practical understanding of Fourier's theorem, which tells us that any periodic waveform can be represented as the sum of sine waves with different frequencies and amplitudes.</p> <p>In particular, for a sawtooth wave, we can say that it is created by adding sine waves at each successive integer multiple of the fundamental frequency. The amplitude of each sine wave is inversely proportional to its harmonic number (or partial number). This means that as you go up in frequency, the contribution of each sine wave to the overall shape of the sawtooth wave decreases, resulting in the characteristic sharp edges of the waveform.</p>"},{"location":"exercises/table/","title":"Table","text":"Periodic Aperiodic row 1 col 1 row 1 col 2"}]}